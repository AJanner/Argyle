<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <link href="favicon.ico" rel="icon" type="image/x-icon"/>
  
  <!-- Butterchurn visualization library - Loaded dynamically to avoid CDN issues -->
  <script>
    // Dynamic loading system to avoid CDN security blocks
    window.loadButterchurnDynamically = function() {
      return new Promise((resolve, reject) => {
        // Try multiple CDN sources with better error handling
        const sources = [
          'https://unpkg.com/butterchurn@2.6.7/butterchurn.min.js',
          'https://cdnjs.cloudflare.com/ajax/libs/butterchurn/2.6.7/butterchurn.min.js',
          'https://fastly.jsdelivr.net/npm/butterchurn@2.6.7/butterchurn.min.js'
        ];
        
        let currentSource = 0;
        
        function tryNextSource() {
          if (currentSource >= sources.length) {
            reject(new Error('All CDN sources failed'));
            return;
          }
          
          const script = document.createElement('script');
          script.src = sources[currentSource];
          script.onload = () => {
            console.log(`✅ Butterchurn loaded from: ${sources[currentSource]}`);
            resolve();
          };
          script.onerror = () => {
            console.warn(`⚠️ Failed to load from: ${sources[currentSource]}`);
            currentSource++;
            tryNextSource();
          };
          
          document.head.appendChild(script);
        }
        
        tryNextSource();
      });
    };
    
    window.loadButterchurnPresetsDynamically = function() {
      return new Promise((resolve, reject) => {
        const sources = [
          'https://unpkg.com/butterchurn-presets@2.4.7/dist/butterchurn-presets.min.js',
          'https://cdnjs.cloudflare.com/ajax/libs/butterchurn-presets/2.4.7/butterchurn-presets.min.js',
          'https://fastly.jsdelivr.net/npm/butterchurn-presets@2.4.7/dist/butterchurn-presets.min.js'
        ];
        
        let currentSource = 0;
        
        function tryNextSource() {
          if (currentSource >= sources.length) {
            reject(new Error('All preset CDN sources failed'));
            return;
          }
          
          const script = document.createElement('script');
          script.src = sources[currentSource];
          script.onload = () => {
            console.log(`✅ Butterchurn presets loaded from: ${sources[currentSource]}`);
            resolve();
          };
          script.onerror = () => {
            console.warn(`⚠️ Failed to load presets from: ${sources[currentSource]}`);
            currentSource++;
            tryNextSource();
          };
          
          document.head.appendChild(script);
        }
        
        tryNextSource();
      });
    };
  </script>
  
  <title>💭MindsEye💬~Ideas</title>
  <link rel="stylesheet" href="styles.css"/>
</head>
<body>
  <!-- Toolbar -->
  <div id="toolbar">
    <div style="position: relative; display: flex; flex-direction: column; align-items: center; flex: 1; min-width: 20px; max-width: none; min-height: 20px; max-height: 180px;">
      <div id="musicVisualizer" style="display: none; position: absolute; top: 2px; left: 0; width: 100%; height: calc(100% - 4px); background: rgba(0,0,0,0.3); border-radius: 6px; overflow: hidden; z-index: 1;">
        <div id="visualizerBars" style="display: flex; justify-content: space-around; align-items: center; height: 100%; padding: 2px;">
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
        </div>
      </div>
      <button onclick="toggleVideoPlayer()" oncontextmenu="handleVideoRightClick(); return false;" title="Toggle Video Player (Right-click to close)" class="toolbar-btn" data-icon="video" style="position: relative; z-index: 2; width: 100%; height: 100%;">📹</button>
    </div>
    <div style="position: relative; display: flex; flex-direction: column; align-items: center; flex: 1; min-width: 20px; max-width: none; min-height: 20px; max-height: 180px;">
      <div id="musicVisualizer2" style="display: none; position: absolute; top: 2px; left: 0; width: 100%; height: calc(100% - 4px); background: rgba(0,0,0,0.3); border-radius: 6px; overflow: hidden; z-index: 1;">
        <div id="visualizerBars2" style="display: flex; justify-content: space-around; align-items: flex-end; height: 100%; padding: 2px;">
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
          <div class="viz-bar" style="width: 4px; background: #8FE04A; transition: height 0.1s ease;"></div>
        </div>
      </div>
      <button onclick="toggleMusicPanel()" oncontextmenu="handleMusicRightClick(); return false;" title="Music Panel (Right-click to start playlist, then play/pause)" class="toolbar-btn" data-icon="music" style="position: relative; z-index: 2; width: 100%; height: 100%;">🎶</button>
    </div>
    <button onclick="rollDice()" oncontextmenu="showDiceSlider(); return false;" title="Random (Right-click for slider)" class="toolbar-btn" data-icon="dice" id="diceButton"></button>
    <button onclick="cycleBackground()" oncontextmenu="rotateBackground(); return false;" title="Change Background (Right-click to rotate)" class="toolbar-btn" data-icon="cycle">🔄</button>
    <button onclick="togglePauseButton()" title="Pause/Unpause" class="toolbar-btn" data-icon="pause">⏯️</button>
    
    <div id="toolbarDropdowns">
      <div style="display: flex; gap: 5px; margin-bottom: 5px;">
        <select id="themeSelector" onchange="switchTheme(this.value)" title="Select Use" style="flex: 1;">
          <option value="default">Start 😀</option>
          <option value="argyle">Argyle ♻️</option>
          <option value="games">Games 🎮</option>
          <option value="blank">Blank 😶</option>
          <option value="meme">Memes 🙄</option>
          <option value="foods">Food 😋</option>
          <option value="sleep">🥱 😴</option>
          <option value="credits"> 💚</option>
        </select>
        
        <select id="presetSelector" onchange="switchPreset(this.value)" title="Select Preset" style="flex: 1;">
          <option value="">Preset 😇</option>
        </select>
      </div>
      <label title="Motion (Right-click to pause/unpause)" style="width: 100%; display: block; margin: 0; padding: 0;"> 
        <input max="3" min="0.0" onchange="const slider = this; const value = parseFloat(slider.value); if(value !== 0) { previousSpeed = value; originalSpeed = value; slider.classList.remove('paused'); } else { slider.classList.add('paused'); } speedMultiplier = value" oncontextmenu="toggleSpeed(); return false;" step="0.1" type="range" value="1.3" style="width: 100%; margin: 0; padding: 0;"/>
      </label>
    </div>
    
    <button onclick="toggleDrawingMode()" oncontextmenu="handleDrawButtonRightClick(event)" title="Toggle Drawing Mode (Right-click for settings when active, clear drawings when inactive)" class="toolbar-btn" data-icon="draw">✏️</button>
    <button onclick="toggleAnalysisPanel()" title="Analysis" class="toolbar-btn" data-icon="analysis">📊</button>
    
    <!-- Drawing Dropdowns (hidden by default) -->
    <div id="drawingDropdowns" class="drawing-dropdowns" style="display: none;">
      <select id="drawingColorDropdown" class="drawing-dropdown" onchange="setDrawingColor(this.value)" title="Drawing Color">
        <option value="#FF3131">🔴 Neon</option>
        <option value="#00FF00">🟢 Argyle</option>
        <option value="#0000FF">🔵 Blue</option>
        <option value="#FFFF00">🟡 Yellow</option>
        <option value="#FF00FF">🟣 Magenta</option>
        <option value="#00FFFF">🔵 Cyan</option>
        <option value="#FFA500">🟠 Orange</option>
        <option value="#800080">🟣 Purple</option>
        <option value="#008000">🟢 Dark Green</option>
        <option value="#000080">🔵 Navy</option>
        <option value="#FFD700">🟡 Gold</option>
        <option value="#FF69B4">🩷 Hot Pink</option>
        <option value="#32CD32">🟢 Lime Green</option>
        <option value="#FF4500">🟠 Orange Red</option>
        <option value="#8A2BE2">🟣 Blue Violet</option>
        <option value="#00CED1">🔵 Dark Turquoise</option>
        <option value="#FF1493">🩷 Deep Pink</option>
        <option value="#FF6347">🟠 Tomato</option>
        <option value="#9370DB">🟣 Medium Purple</option>
        <option value="#20B2AA">🔵 Light Sea Green</option>
        <option value="#FFB6C1">🩷 Light Pink</option>
        <option value="#DDA0DD">🟣 Plum</option>
        <option value="#98FB98">🟢 Pale Green</option>
        <option value="#F0E68C">🟡 Khaki</option>
        <option value="#FFA07A">🟠 Light Salmon</option>
        <option value="#87CEEB">🔵 Sky Blue</option>
        <option value="#90EE90">🟢 Light Green</option>
      </select>
      <select id="drawingWidthDropdown" class="drawing-dropdown" onchange="setDrawingWidth(parseInt(this.value))" title="Drawing Width">
        <option value="1">1px</option>
        <option value="2">2px</option>
        <option value="3">3px</option>
        <option value="4">4px</option>
        <option value="5">5px</option>
        <option value="8">8px</option>
        <option value="12">12px</option>
        <option value="16">16px</option>
        <option value="20">20px</option>
      </select>
    </div>
    
    <button onclick="saveIdeas()" title="Save .json File" class="toolbar-btn" data-icon="save">💾Save.json</button>
    <input accept=".json" id="fileLoader" style="display:none" type="file"/>
    <button onclick="document.getElementById('fileLoader').click()" title="Load .json File" class="toolbar-btn" data-icon="load">🆙 Load.json</button>
    <button onclick="captureCanvasOnly()" oncontextmenu="deleteAllIdeas(); return false;" title="Snapshot (Right-click to clear canvas)" class="toolbar-btn" data-icon="clear">🚮Clear💭Ideas🗑️</button>
  </div>

  <!-- Media Toolbar -->
  <div id="mediaToolbar">
    <label>🫟 Background:
      <input accept="image/*" id="bgLoader" type="file"/>
    </label>
    <label>📀 Video:
      <input accept="video/*" id="videoLoader" type="file"/>
    </label>
    <label>🎥 YouTube:
      <input id="youtubeLink" placeholder="Paste Video URL" type="text"/>
      <button onclick="loadYouTubeVideo()" class="toolbar-btn" data-icon="youtube">Load</button>
    </label>
    <div class="media-separator"></div>
    <button onclick="recordState('start')" class="record-btn start-btn toolbar-btn" data-icon="record-in" title="Mark In Point">🎬 In</button>
    
    <button onclick="recordState('keyframe')" class="record-btn keyframe-btn toolbar-btn" data-icon="keyframe" title="Add Keyframe">📍 Key</button>
    <button onclick="recordState('end')" class="record-btn end-btn toolbar-btn" data-icon="record-out" title="Mark Out Point">🏁 Out</button>
    <button onclick="startPlayback()" class="play-btn toolbar-btn" data-icon="play" title="Play In to Out">▶️ Play</button>
    <div class="timeline-control">
      <span>Timeline:</span>
      <input id="mediaPlaybackSlider" max="1" min="0" step="0.01" type="range" value="0"/>
      <span id="playbackTimeDisplay" style="color: white; font-size: 12px; margin-left: 10px;">00:00 / 00:00</span>
    </div>
    <div class="duration-control">
      <span>Duration:</span>
      <select id="mediaPlaybackDuration">
        <option value="5000">5s</option>
        <option selected="" value="10000">10s</option>
        <option value="15000">15s</option>
        <option value="20000">20s</option>
        <option value="30000">30s</option>
        <option value="40000">40s</option>
        <option value="50000">50s</option>
      </select>
    </div>
    <button onclick="saveAnimation()" class="save-btn toolbar-btn" data-icon="save" title="Save Animation">💾 Save</button>
    <button onclick="loadAnimation()" class="load-btn toolbar-btn" data-icon="load" title="Load Animation">📂 Load</button>
    <button onclick="captureCanvas()" class="snapshot-btn toolbar-btn" data-icon="snapshot-media" title="Snapshot">📷 Snapshot</button>
    <button onclick="toggleMediaToolbarMinimize()" class="minimize-btn toolbar-btn" data-icon="hide" title="Hide/Show"></button>
  </div>

  <!-- Video Elements -->
  <video id="bgVideo" loop="" muted="" playsinline="" style="position:fixed; top:0; left:0; width:100vw; height:100vh; object-fit:cover; z-index:-2; display:none; pointer-events: none;"></video>
  <iframe allow="autoplay" allowfullscreen="" frameborder="0" id="ytFrame" style="position:fixed; top:0; left:0; width:100%; height:100%; z-index:-3; display:none;"></iframe>

  <!-- Video Player -->
  <div id="videoPlayer" onmouseenter="showVideoControls()">
    <iframe id="videoIframe" allow="autoplay" allowfullscreen="" frameborder="0"></iframe>
  </div>

  <!-- Video Controls -->
  <div id="videoControls">
    <div style="margin-bottom: 10px;">
      <input type="range" id="videoOpacitySlider" min="0.0" max="1.0" step="0.1" value="0.5" style="width: 100px;" oninput="updateVideoOpacity(this.value)" title="Video Opacity"/>
      <input type="range" id="videoSizeSlider" min="0.3" max="1.5" step="0.1" value="1.0" style="width: 100px; margin-left: 10px;" oninput="updateVideoSize(this.value)" title="Video Size"/>
      <input type="range" id="videoVerticalSlider" min="-200" max="200" step="10" value="0" style="width: 100px; margin-left: 10px;" oninput="updateVideoVertical(this.value)" title="Video Vertical Position"/>
    </div>
    <button onclick="videoTogglePlaylist()" title="Show Playlist" class="video-control-btn" data-icon="playlist">📋</button>
    <button onclick="videoPrev()" title="Previous" class="video-control-btn" data-icon="prev">⏮️</button>
    <button onclick="videoTogglePlay()" title="Play/Pause" class="video-control-btn" data-icon="play">🟢</button>

    <button onclick="videoNext()" title="Next" class="video-control-btn" data-icon="next">⏭️</button>

    <button onclick="videoClose()" title="Close" class="video-control-btn" data-icon="close">��</button>
  </div>

  <!-- Video Playlist Panel -->
  <div id="videoPlaylist">
    <div style="position: relative;">
      <h3>💚 YouTube Playlist ♻️</h3>
      <button onclick="minimizePlaylist()" title="Minimize" style="position: absolute; top: 5px; right: 30px; background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 3px; padding: 2px 6px; cursor: pointer; font-size: 10px;">−</button>
      <button onclick="closePlaylist()" title="Close" style="position: absolute; top: 5px; right: 5px; background: rgba(255,0,0,0.7); color: white; border: none; border-radius: 3px; padding: 2px 6px; cursor: pointer; font-size: 10px;">✕</button>
    </div>
    <div style="margin-bottom: 10px; padding: 10px; background: rgba(0, 0, 0, 0.3); border-radius: 5px;">
      <label id="currentPlaylistLabel" style="display: block; margin-bottom: 5px; color: gold;">📋 Upload Playlist (.txt):</label>
      <input type="file" id="playlistUpload" accept=".txt" style="width: 100%; margin-bottom: 5px;"/>
      <button onclick="uploadPlaylist()" style="background: linear-gradient(45deg, #4CAF50, #45a049); border: none; color: black; padding: 5px 10px; border-radius: 3px; cursor: pointer; font-size: 12px;">📤 Upload</button>
      <button onclick="previousPlaylist()" style="background: linear-gradient(45deg, #FF9800, #F57C00); border: none; color: black; padding: 5px 10px; border-radius: 3px; cursor: pointer; font-size: 12px; margin-left: 5px;">◀️</button>
      <button onclick="nextPlaylist()" style="background: linear-gradient(45deg, #2196F3, #1976D2); border: none; color: black; padding: 5px 10px; border-radius: 3px; cursor: pointer; font-size: 12px; margin-left: 5px;">▶️</button>
      <button onclick="playRandomVideo()" style="background: linear-gradient(45deg, #9C27B0, #7B1FA2); border: none; color: black; padding: 5px 10px; border-radius: 3px 0px 0px 3px; cursor: pointer; font-size: 12px; margin-left: 5px;">🔄</button><input type="file" id="mp4Upload" accept=".mp4,video/mp4" style="display: none;" onchange="uploadMp4Video(event)"/><button onclick="document.getElementById('mp4Upload').click()" style="background: linear-gradient(45deg, #FF6B6B, #EE5A52); border: none; color: black; padding: 5px 10px; border-radius: 0px 3px 3px 0px; cursor: pointer; font-size: 12px;">🀄️</button>
    </div>
    <div style="margin-bottom: 10px; padding: 10px; background: rgba(0, 0, 0, 0.3); border-radius: 5px;">
      <label style="display: block; margin-bottom: 5px; color: gold; font-size: 12px;">🌐 URL Viewer (Websites, YouTube, Video Streams):</label>
      <div style="display: flex; gap: 5px; align-items: center;">
        <input type="text" id="singleVideoUrl" placeholder="https://example.com, https://youtube.com/watch?v=..., video.mp4" onkeydown="if(event.key==='Enter') playSingleVideoStream()" style="flex: 1; padding: 6px; border: 2px solid #FF4444; border-radius: 3px; background: rgba(0, 0, 0, 0.6); color: white; font-size: 12px; outline: none;"/>
        <button onclick="playSingleVideoStream()" style="background: linear-gradient(45deg, #FF4444, #CC3333); border: none; color: white; padding: 6px 12px; border-radius: 3px; cursor: pointer; font-size: 12px; font-weight: bold;">🌐 Load</button>
      </div>
    </div>
    <div id="videoPlaylistItems">
      <!-- Playlist items will be loaded here -->
    </div>
  </div>

  <!-- Drawing Settings Panel -->
  <div id="drawingSettingsPanel" class="panel" style="display: none; width: 15%;">
    <h3 style="margin: 5px 0;">🎨 Drawing Settings</h3>
    <div style="margin: 10px 0;">
      <label for="drawingColorSelect">Color:</label>
      <select id="drawingColorSelect" onchange="setDrawingColor(this.value)">
        <option value="#FF3131">Neon</option>
        <option value="#00FF00">Argyle</option>
        <option value="#0000FF">Blue</option>
        <option value="#FFFF00">Yellow</option>
        <option value="#FF00FF">Magenta</option>
        <option value="#00FFFF">Cyan</option>
        <option value="#FFA500">Orange</option>
        <option value="#800080">Purple</option>
        <option value="#008000">Dark Green</option>
        <option value="#000080">Navy</option>
        <option value="#FFD700">Gold</option>
        <option value="#FF69B4">Hot Pink</option>
        <option value="#32CD32">Lime Green</option>
        <option value="#FF4500">Orange Red</option>
        <option value="#8A2BE2">Blue Violet</option>
        <option value="#00CED1">Dark Turquoise</option>
        <option value="#FF1493">Deep Pink</option>
        <option value="#FF6347">Tomato</option>
        <option value="#9370DB">Medium Purple</option>
        <option value="#20B2AA">Light Sea Green</option>
        <option value="#FFB6C1">Light Pink</option>
        <option value="#DDA0DD">Plum</option>
        <option value="#98FB98">Pale Green</option>
        <option value="#F0E68C">Khaki</option>
        <option value="#FFA07A">Light Salmon</option>
        <option value="#87CEEB">Sky Blue</option>
        <option value="#90EE90">Light Green</option>
      </select>
    </div>
    <div style="margin: 10px 0;">
      <label for="drawingWidthSelect">Width:</label>
      <select id="drawingWidthSelect" onchange="setDrawingWidth(parseInt(this.value))">
        <option value="1">1px</option>
        <option value="2">2px</option>
        <option value="3">3px</option>
        <option value="4">4px</option>
        <option value="5">5px</option>
        <option value="8">8px</option>
        <option value="12">12px</option>
        <option value="16">16px</option>
        <option value="20">20px</option>
      </select>
    </div>
    <div style="margin: 10px 0; text-align: center;">
      <button onclick="switchToBubbleMode()" style="background: linear-gradient(45deg, #2196F3, #1976D2); border: none; color: white; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; width: 100%; margin-bottom: 5px;">🫧 Switch to Bubble Mode</button>
      <button onclick="clearDrawingFromPanel()" style="background: linear-gradient(45deg, #f44336, #da190b); border: none; color: white; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; width: 100%; margin-bottom: 5px;">🧹 Clear Drawing</button>
      <button onclick="toggleDrawingFlash()" id="flashDrawingBtn" style="background: linear-gradient(45deg, #FFD700, #FFA500); border: none; color: black; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; width: 100%; margin-bottom: 5px;">✨ Flash Drawing</button>
      <button onclick="smoothLastLine()" style="background: linear-gradient(45deg, #4CAF50, #45a049); border: none; color: white; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; width: 100%;">🔄 Smooth Last Line</button>
    </div>
    <button onclick="closeDrawingSettings()" class="panel-close-btn">✖️</button>
  </div>

  <!-- Analysis Panel -->
  <div id="analysisPanel" class="analysis-panel" style="display: none;">
    <h3 style="margin: 5px 0; color: gold;">📊 Analysis</h3>
    <div style="display: flex; flex-direction: column; gap: 8px; margin: 15px 0;">
      <button onclick="openAnalysisIframe('suggestions')" style="background: linear-gradient(45deg, #4CAF50, #45a049); border: none; color: white; padding: 10px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; text-align: left;">🍿 Suggestions:<br>Current: Anime (All)</button>
      <button onclick="openAnalysisIframe('ideas')" style="background: linear-gradient(45deg, #2196F3, #1976D2); border: none; color: white; padding: 10px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; text-align: left;">🧠 Ideas:<br>Current: Comedy (All)</button>
      <button onclick="toggleProjectMPanel()" style="background: linear-gradient(45deg, #9C27B0, #7B1FA2); border: none; color: white; padding: 10px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; text-align: left;">🎨 Music Visualization<br><span style="font-size: 11px; opacity: 0.8;">Butterchurn & MilkDrop</span></button>
      <button onclick="openAnalysisIframe('v6')" style="background: linear-gradient(45deg, #9C27B0, #7B1FA2); border: none; color: white; padding: 10px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; text-align: left;">🎯 V6</button>
      <button onclick="openAnalysisIframe('credits')" style="background: linear-gradient(45deg, #607D8B, #455A64); border: none; color: white; padding: 10px 16px; border-radius: 6px; cursor: pointer; font-weight: bold; text-align: left;">👥 Credits</button>
    </div>
    <button onclick="closeAnalysisPanel()" class="panel-close-btn">✖️</button>
  </div>

  <!-- Analysis Iframe Container -->
  <div id="analysisIframeContainer" class="analysis-iframe-container" style="display: none;">
    <div style="position: relative; height: 100%;">
      <button onclick="closeAnalysisIframe()" class="panel-close-btn" style="position: absolute; top: 5px; right: 5px; z-index: 1;">✖️</button>
      <iframe id="analysisIframe" style="width: 100%; height: 100%; border: none; border-radius: 6px;"></iframe>
    </div>
  </div>

  <!-- Dice Overlay -->
  <div class="dice-overlay" id="diceOverlay"></div>

  <!-- Read Panel -->
  <div class="read-panel" id="readPanel">
    <div style="margin-bottom: 15px; font-weight: bold; color: gold;">🤔💭ME💬v5😎</div>
    <div style="color: white; margin-bottom: 20px; line-height: 1.4;">
      Welcome to MindsEye! This is a creative space for capturing ideas, thoughts, and inspiration. 
      Use the drawing tools to sketch, the music panel for background ambiance, and the video player for visual inspiration.
      Click on the canvas to create idea bubbles, and explore the various themes and presets available.
    </div>
    <button onclick="hideReadPanel()" style="padding: 8px 16px; background: rgba(0, 0, 0, 0.7); color: gold; border: 2px solid darkgreen; border-radius: 6px; cursor: pointer;">OK</button>
  </div>

  <!-- Canvas -->
  <canvas id="canvas"></canvas>

  <!-- Radio URL Input Panel -->
  <div class="radio-input-panel" id="radioInputPanel" style="display: none;">
    <h3>📻 Radio Station</h3>
    <div style="margin-bottom: 15px;">
      <label style="display: block; margin-bottom: 8px; color: #fff; font-weight: bold;">Enter Radio Stream URL:</label>
      <input type="text" id="radioUrlInput" placeholder="https://example.com/stream.m3u8" style="width: 100%; padding: 10px; border: 2px solid #4CAF50; border-radius: 6px; background: rgba(0, 0, 0, 0.8); color: #fff; font-size: 14px; outline: none;" />
    </div>
    <div style="display: flex; gap: 10px; justify-content: flex-end;">
      <button onclick="cancelRadioInput()" style="background: linear-gradient(45deg, #f44336, #da190b); border: none; color: white; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-weight: bold;">Cancel</button>
      <button onclick="confirmRadioInput()" style="background: linear-gradient(45deg, #4CAF50, #45a049); border: none; color: white; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-weight: bold;">Connect</button>
    </div>
  </div>

  <!-- Playlist Upload Confirmation Panel -->
  <div class="playlist-confirmation-panel" id="playlistConfirmationPanel" style="display: none;">
    <h3>🎵 Playlist Upload Success</h3>
    <div style="margin-bottom: 20px; text-align: center;">
      <div id="playlistConfirmationIcon" style="font-size: 48px; margin-bottom: 10px;">✅</div>
      <div id="playlistConfirmationMessage" style="color: #fff; font-size: 16px; line-height: 1.4; margin-bottom: 15px;">
        Successfully uploaded playlist with <span id="trackCount" style="color: #4CAF50; font-weight: bold;">0</span> tracks!
      </div>
      <div style="color: #ccc; font-size: 14px;">
        You can now play through them using the <strong>Previous/Next</strong> buttons.
      </div>
    </div>
    <div style="display: flex; justify-content: center;">
      <button onclick="closePlaylistConfirmation()" style="background: linear-gradient(45deg, #4CAF50, #45a049); border: none; color: white; padding: 12px 30px; border-radius: 6px; cursor: pointer; font-weight: bold; font-size: 16px;">Got it!</button>
    </div>
  </div>

  <!-- Music Panel -->
  <div class="music-panel" id="musicPanel">
    <h3>🎵 Music Player
      <div class="music-close-btn" onclick="closeMusicPanel()" title="Close Music Panel">✖️</div>
    </h3>
    <!-- Now Playing Section -->
    <div class="now-playing-section">
      <div class="now-playing-label">Now Playing:</div>
      <div id="nowPlayingInfo" class="now-playing-info">No track playing</div>
    </div>
    <div style="display: flex; gap: 0px; margin-bottom: 10px;">
      <button onclick="previousMusicTrack()" class="music-control-btn" data-icon="mprevious" style="background: linear-gradient(45deg, #FF9800, #F57C00); border: none; color: white; padding: 1px; border-radius: 6px 0px 0px 6px; cursor: pointer; font-weight: bold; flex: 1; height: 48px; background-size: 100% 100% !important; background-position: center !important;">⏮️ Previous</button>
      <button onclick="stopMusic()" class="music-control-btn" data-icon="mplay" style="background: linear-gradient(45deg, #f44336, #da190b); border: none; color: white; padding: 1px; border-radius: 0px; cursor: pointer; font-weight: bold; flex: 1; height: 48px; background-size: 100% 100% !important; background-position: center !important;">⏯️Play🎚️</button>
      <button onclick="nextMusicTrack()" class="music-control-btn" data-icon="mnext" style="background: linear-gradient(45deg, #2196F3, #1976D2); border: none; color: white; padding: 1px; border-radius: 0px 6px 6px 0px; cursor: pointer; font-weight: bold; flex: 1; height: 48px; background-size: 100% 100% !important; background-position: center !important;">⏭️ Next</button>
    </div>
    <!-- Music Player Slider Container -->
    <div id="musicPlayerSlider" style="margin: 10px 0; display: none;">
      <input type="range" id="musicSeekBar" min="0" max="100" value="0" style="width: 100%; height: 6px; background: rgba(0, 0, 0, 0.6); border: 2px solid darkgreen; border-radius: 5px; outline: none;">
      <div id="musicTime" style="text-align: center; font-size: 12px; color: #888; margin-top: 5px;">00:00 / 00:00</div>
    </div>
    <div style="display: flex; gap: 0px; margin-bottom: 10px;">
      <button onclick="loadRadioStation()" class="music-control-btn" data-icon="mradio" style="background: linear-gradient(45deg, #9C27B0, #7B1FA2); border: none; color: white; padding: 1px; border-radius: 6px 0px 0px 6px; cursor: pointer; font-weight: bold; flex: 1; height: 96px; background-size: 100% 100% !important; background-position: center !important;">📻 Radio</button>
      <input type="file" id="musicPlaylistUpload" accept=".txt" style="display: none;" onchange="uploadMusicPlaylist(event)"/>
      <button onclick="document.getElementById('musicPlaylistUpload').click()" class="music-control-btn" data-icon="mplaylist" style="background: linear-gradient(45deg, #4CAF50, #45a049); border: none; color: white; padding: 1px; border-radius: 0px 6px 6px 0px; cursor: pointer; font-weight: bold; flex: 1; height: 96px; background-size: 100% 100% !important; background-position: center !important;">📁 Upload Playlist</button>
    </div>
    <div id="musicList">
      <!-- Music items will be loaded here -->
    </div>
  </div>

  <!-- ProjectM Visualization Panel -->
  <div class="projectm-panel" id="projectmPanel">
    <h3>🎨 Music Visualization (Butterchurn)
      <div class="projectm-close-btn" onclick="closeProjectMPanel()" title="Close Visualization">✖️</div>
    </h3>
    <div class="projectm-controls">
      <button onclick="startButterchurn()">🎵 Start Visualizer</button>
      <button onclick="retryButterchurn()" id="retryBtn" style="display: none;">🔄 Retry Loading</button>
      <button onclick="nextLocalEffect()" id="nextLocalEffectBtn" style="display: none;">🎨 Next Effect</button>
      <button onclick="previousPreset()">⏮️ Previous</button>
      <button onclick="nextPreset()">⏭️ Next</button>
      <button onclick="randomPreset()">🎲 Random</button>
      <button onclick="toggleAutoPreset()">🔄 Auto</button>
              <button onclick="toggleVisualizationFullscreen()">⛶ Fullscreen</button>
    </div>
    <div class="preset-controls">
      <label>Preset: <select id="presetSelect" onchange="selectPreset(this.value)"></select></label>
      <label>Auto: <select id="autoMs" onchange="setAutoPreset(this.value)">
        <option value="0">Off</option>
        <option value="15000">15s</option>
        <option value="30000">30s</option>
        <option value="60000">1m</option>
        <option value="120000">2m</option>
        <option value="300000">5m</option>
      </select></label>
      <label>Blend: <input id="blendSec" type="number" min="0" max="10" step="0.5" value="2" style="width: 60px;">s</label>
    </div>
    <div class="visualization-canvas-container">
      <canvas id="butterchurnCanvas" width="400" height="300"></canvas>
    </div>
    <div class="preset-info">
      <div>Current: <span id="currentPreset">None</span></div>
      <div>Total: <span id="totalPresets">0</span></div>
      <div>Status: <span id="presetStatus">Ready</span></div>
    </div>
  </div>

  <!-- Main Panel -->
  <div class="panel" id="panel">
    <div style="position: relative; margin-bottom: 10px; padding-top: 5px; height: 30px; display: flex; align-items: center; gap: 0px;">
      <div class="panel-close-btn" onclick="closePanel()" title="Close Panel" style="position: static;">🅇</div>
      <button onclick="minimizePanel()" title="Minimize" style="background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 3px; padding: 2px 6px; cursor: pointer; font-size: 10px;">⌑</button>
      <input type="checkbox" id="disablePanelTimeout" title="Disable Panel Timeout" style="width: 12px; height: 12px; cursor: pointer;">
    </div>
    <input id="title" placeholder="Title"/>
    <div style="display: flex; gap: 10px; margin: 10px 0;">
      <input id="dateField" type="date" style="flex: 1; background-color: rgba(0, 0, 0, 0.6); color: gold; border: 2px solid darkgreen; font-family: 'Monaco', serif; padding: 6px; border-radius: 6px;"/>
      <input id="timeField" type="time" style="flex: 1; background-color: rgba(0, 0, 0, 0.6); color: gold; border: 2px solid darkgreen; font-family: 'Monaco', serif; padding: 6px; border-radius: 6px;"/>
    </div>
    <textarea id="description" placeholder="Description" rows="1"></textarea>
    
    <div style="margin: 10px 0; display: flex; flex-wrap: wrap; gap: 0px;">
      <button onclick="savePanel()" title="Save" class="bubble-btn" data-png="busave" style="flex: 0 0 33.333%;">Save💾</button>
      <button onclick="deleteIdea()" title="Delete Bubble" class="bubble-btn" data-png="budelete" style="flex: 0 0 33.333%;">Delete💭️</button>
      <button onclick="clearUploadedImage()" title="Clear IMG" class="bubble-btn" data-png="buimage" style="flex: 0 0 33.333%;">🗑️Image</button>
    </div>
    
    <div class="resize-handle">⤡</div>
    
    <div style="margin-top: 1px;">
      <input accept="image/*" id="uploadImage" type="file"/>
    </div>
    
    <label style="margin-left: 10px;">⬆️ Upload PNG | ⬇️ Change 💭 Size
      <input id="sizeSlider" title="Bubble Size" max="200" min="10" oninput="selectedIdea.radius = parseInt(this.value)" type="range" value="75"/>
    </label><br>
    
    <div style="margin-left: 10px; display: flex; gap: 10px; align-items: center;">
      <label style="flex: 1;">⬇️ Text Size
        <input id="fontSizeSlider" title="Text Size" max="48" min="8" oninput="selectedIdea.fontSize = parseInt(this.value)" type="range" value="14"/>
      </label>
      <label style="flex: 1;">⬇️ Ratio
        <input id="heightRatioSlider" title="Ratio" max="1.7" min="0.3" step="0.1" oninput="updateBubbleRatio(this.value)" type="range" value="1.0"/>
      </label>
    </div>
    
    <div style="margin: 10px 0;">
      <label style="margin-left: 10px;">⬆️ Rotation | ⬇️ Shape
        <select id="shapeSelector" style="background-color: rgba(0, 0, 0, 0.6); color: gold; border: 2px solid darkgreen; font-family: 'Monaco', serif; padding: 6px; border-radius: 6px; width: 100%; margin-top: 5px;">
          <option value="circle">Circle</option>
          <option value="square">Square</option>
          <option value="triangle">Triangle</option>
          <option value="pentagon">Pentagon</option>
          <option value="hexagon">Hexagon</option>
          <option value="octagon">Octagon</option>
          <option value="striker">Striker</option>
          <option value="goal">Goal</option>
          <option value="ball">Ball</option>
          <option value="puck">Puck</option>
        </select>
      </label>
    </div>
    
    <div id="actionSliderContainer" style="margin: 10px 0; display: none;">
      <label style="margin-left: 10px;">⚡ Action
        <input id="actionSlider" title="Action" max="20" min="1" step="1" oninput="updateActionSlider(this.value)" type="range" value="5"/>
        <span id="actionSliderValue" style="color: gold; font-size: 12px; margin-left: 10px;">5</span>
      </label>
    </div>
    
    <input id="rotationSlider" title="Rotate Bubble" max="360" min="0" oninput="selectedIdea.rotation = parseInt(this.value)" type="range" value="0"/>
    
    <div style="margin-bottom: 10px;">
      <label style="margin-left: 10px;">⬆️ Rotation | ⬇️ Select Image 👾
        <select id="imageSelector" style="background-color: rgba(0, 0, 0, 0.6); color: gold; border: 2px solid darkgreen; font-family: 'Monaco', serif; padding: 6px; border-radius: 6px; width: 100%; margin-top: 5px;">
          <option value="">None</option>
          <option value="images/a1.png">a1.png</option>
          <option value="images/a2.png">a2.png</option>
          <option value="images/a3.png">a3.png</option>
          <option value="images/a4.png">a4.png</option>
          <option value="images/a5.png">a5.png</option>
          <option value="images/a6.png">a6.png</option>
          <option value="images/a7.png">a7.png</option>
          <option value="images/a8.png">a8.png</option>
          <option value="images/a9.png">a9.png</option>
          <option value="images/a10.png">a10.png</option>
          <option value="images/a11.png">a11.png</option>
          <option value="images/a12.png">a12.png</option>
          <option value="images/a13.png">a13.png</option>
          <option value="images/a14.png">a14.png</option>
          <option value="images/a15.png">a15.png</option>
          <option value="images/a16.png">a16.png</option>
          <option value="images/a17.png">a17.png</option>
          <option value="images/a18.png">a18.png</option>
          <option value="images/a19.png">a19.png</option>
          <option value="images/a20.png">a20.png</option>
          <option value="images/a21.png">a21.png</option>
          <option value="images/a22.png">a22.png</option>
          <option value="images/a23.png">a23.png</option>
          <option value="images/a24.png">a24.png</option>
          <option value="images/a25.png">a25.png</option>
          <option value="images/a26.png">a26.png</option>
          <option value="images/a27.png">a27.png</option>
          <option value="images/a28.png">a28.png</option>
          <option value="images/a29.png">a29.png</option>
          <option value="None">---♻️Archive💚---</option>
          <option value="images/l1.png">l1.png</option>
          <option value="images/l2.png">l2.png</option>
          <option value="images/l3.png">l3.png</option>
          <option value="images/l4.png">l4.png</option>
          <option value="images/l5.png">l5.png</option>
          <option value="images/l6.png">l6.png</option>
          <option value="images/l7.png">l7.png</option>
          <option value="images/l8.png">l8.png</option>
          <option value="images/l9.png">l9.png</option>
          <option value="images/l10.png">l10.png</option>
          <option value="images/l11.png">l11.png</option>
          <option value="images/l12.png">l12.png</option>
          <option value="images/l13.png">l13.png</option>
          <option value="images/l14.png">l14.png</option>
          <option value="images/l15.png">l15.png</option>
          <option value="images/l16.png">l16.png</option>
          <option value="images/l17.png">l17.png</option>
          <option value="images/l18.png">l18.png</option>
          <option value="images/l19.png">l19.png</option>
          <option value="images/l20.png">l20.png</option>
          <option value="images/l21.png">l21.png</option>
          <option value="images/l22.png">l22.png</option>
          <option value="images/l23.png">l23.png</option>
          <option value="images/l24.png">l24.png</option>
          <option value="images/l25.png">l25.png</option>
          <option value="images/l26.png">l26.png</option>
          <option value="images/l27.png">l27.png</option>
          <option value="images/l28.png">l28.png</option>
          <option value="images/l29.png">l29.png</option>
          <option value="images/l30.png">l30.png</option>
          <option value="images/l31.png">l31.png</option>
          <option value="images/l32.png">l32.png</option>
          <option value="images/l33.png">l33.png</option>
          <option value="images/l34.png">l34.png</option>
          <option value="images/l35.png">l35.png</option>
          <option value="images/l36.png">l36.png</option>
          <option value="images/l37.png">l37.png</option>
          <option value="images/l38.png">l38.png</option>
          <option value="images/l39.png">l39.png</option>
          <option value="images/l40.png">l40.png</option>
          <option value="images/l41.png">l41.png</option>
          <option value="images/l42.png">l42.png</option>
        </select>
      </label>
    </div>
    
    <div style="margin-bottom: 10px; display: flex; flex-wrap: wrap; gap: 0px;">
      <button onclick="changeColor()" title="Bubble Colour" class="bubble-btn large" data-png="bucolor">💭️Colour</button>
      <button onclick="changeTextColor()" title="Text Colour" class="bubble-btn large" data-png="butextcolor">💬Colour</button>
      <button onclick="closePanel()" title="Close" class="bubble-btn large" data-png="buclose">Close💭️</button>
      <button onclick="toggleGlow()" title="Toggle Glow" class="bubble-btn large" data-png="buglow">Glow🔆</button>
      <button onclick="changeGlowColor()" title="Change Glow Color" class="bubble-btn large" data-png="buglowcolor">Colour🔅</button>
      <button onclick="toggleFlash()" title="Toggle Flash" class="bubble-btn large" data-png="buflash">Flash🎇</button>
      <button onclick="toggleTransparent()" title="Toggle Transparent" class="bubble-btn large" data-png="buopaque">Opaque</button>
      <button onclick="toggleFixed()" title="Toggle Fixed Mode" class="bubble-btn large" data-png="busolid">Solid🗿</button>
      <button onclick="toggleStatic()" title="Toggle Static Mode" class="bubble-btn large" data-png="bustatic">Static🧽</button>
      <button onclick="cycleFont()" title="Cycle Fonts" class="bubble-btn large" data-png="bufont">Font</button>
      <button onclick="toggleCheckeredBorder()" title="Toggle Checkered Border" class="bubble-btn large" data-png="bucheck">Check🏁</button>
      <button onclick="togglePanelSide()" title="Toggle Panel Side" class="bubble-btn large" data-png="buside">↔️</button>
    </div>
    

  </div>

  <!-- Scripts -->
  <script src="themes.js"></script>
  <script src="main.js"></script>
  <script src="media.js"></script>
  <script src="video.js"></script>
  <script>
    // Global scope exports - ensure all functions are available immediately
    console.log("🔧 Setting up global function exports...");
    
    // Function to export all functions to global scope
    function exportAllFunctions() {
      console.log("🔧 Starting function export...");
      console.log("🔧 Available functions:", {
        loadYouTubeVideo: typeof loadYouTubeVideo,
        toggleMediaToolbar: typeof toggleMediaToolbar,
        captureCanvasOnly: typeof captureCanvasOnly
      });
      
      try {
        // Export all functions to global scope
        window.loadYouTubeVideo = loadYouTubeVideo;
        window.toggleMusicPanel = toggleMusicPanel;
        window.closeMusicPanel = closeMusicPanel;
        window.updateNowPlayingInfo = updateNowPlayingInfo;
        window.loadMusicList = loadMusicList;
        window.toggleProjectMPanel = toggleProjectMPanel;
        window.closeProjectMPanel = closeProjectMPanel;
        window.toggleProjectM = toggleProjectM;
        window.changeProjectMPreset = changeProjectMPreset;
        window.toggleProjectMFullscreen = toggleProjectMFullscreen;
        window.toggleVisualizationFullscreen = function() {
          if (typeof LocalVisualizer !== 'undefined') {
            LocalVisualizer.toggleFullscreen();
          }
        };
        window.resetProjectMVisualizer = resetProjectMVisualizer;
        window.playMusic = playMusic;
        window.stopMusic = stopMusic;
        window.startMusicPlaylist = startMusicPlaylist;
        window.playMusicFromPlaylist = playMusicFromPlaylist;
        window.nextMusicTrack = nextMusicTrack;
        window.previousMusicTrack = previousMusicTrack;
        window.loadRadioStation = loadRadioStation;
window.uploadMusicPlaylist = uploadMusicPlaylist;
        window.handleMusicRightClick = handleMusicRightClick;
        window.loadMusicPlaylist = loadMusicPlaylist;
        window.getDefaultPlaylist = getDefaultPlaylist;
        window.playRadioStream = playRadioStream;
        window.handleVideoRightClick = handleVideoRightClick;
        window.showReadPanel = showReadPanel;
        window.hideReadPanel = hideReadPanel;
        window.toggleMediaToolbar = toggleMediaToolbar;
        window.toggleMediaToolbarMinimize = toggleMediaToolbarMinimize;
        window.toggleMediaToolbarVisibility = toggleMediaToolbarVisibility;
        window.isMobileDevice = isMobileDevice;
        window.ensureMobileToolbarVisibility = ensureMobileToolbarVisibility;
        window.playRadioStreamFromPlaylist = playRadioStreamFromPlaylist;
        window.handleBackgroundUpload = handleBackgroundUpload;
        window.handleVideoUpload = handleVideoUpload;
        window.captureCanvas = captureCanvas;
        window.captureCanvasOnly = captureCanvasOnly;
        window.rollDice = rollDice;
        window.showDiceSlider = showDiceSlider;
        window.hideDiceSlider = hideDiceSlider;
        window.uploadPlaylist = uploadPlaylist;
        window.nextPlaylist = nextPlaylist;
        window.previousPlaylist = previousPlaylist;
        window.playRandomVideo = playRandomVideo;
        window.preloadPlaylists = preloadPlaylists;
        window.updateVideoPlaylistDisplaySilent = updateVideoPlaylistDisplaySilent;
        window.captureBubblePositions = captureBubblePositions;
        window.addTimelineMarker = addTimelineMarker;
        window.updateTimelineDisplay = updateTimelineDisplay;
        window.loadUploadedPlaylist = loadUploadedPlaylist;
        window.loadVideoPlaylist = loadVideoPlaylist;
        window.videoPlayVideo = videoPlayVideo;
        window.videoPlay = videoPlay;
        window.videoPause = videoPause;
        window.videoTogglePlay = videoTogglePlay;
        window.videoIsPlaying = videoIsPlaying;
        window.videoNext = videoNext;
        window.videoPrev = videoPrev;
        window.videoTogglePlaylist = videoTogglePlaylist;
        window.videoToggleFullscreen = videoToggleFullscreen;
        window.videoClose = videoClose;
        window.showVideoControls = showVideoControls;
        window.showVideoPlaylist = showVideoPlaylist;
        window.updateVideoPlaylistDisplay = updateVideoPlaylistDisplay;
        window.toggleVideoPlayer = toggleVideoPlayer;
        window.initVideoPlayer = initVideoPlayer;
        
        // Recording functions
                       window.recordState = recordState;
               window.startPlayback = startPlayback;
               window.stopPlayback = stopPlayback;
               window.animateBubbles = animateBubbles;
               window.interpolateBubblePositions = interpolateBubblePositions;
               window.saveAnimation = saveAnimation;
               window.loadAnimation = loadAnimation;
               window.updatePlaybackTimeDisplay = updatePlaybackTimeDisplay;
               window.updateTimelineMarkers = updateTimelineMarkers;
               window.toggleVideoPlayer = toggleVideoPlayer;
        
        // Main.js functions
        window.init = init;
        window.setupEventListeners = setupEventListeners;
        window.switchTheme = switchTheme;
        window.addIdea = addIdea;
        window.saveIdeas = saveIdeas;
        window.deleteAllIdeas = deleteAllIdeas;
        window.cycleBackground = cycleBackground;
        window.rotateBackground = rotateBackground;
        window.showPanel = showPanel;
        window.savePanel = savePanel;
        window.deleteIdea = deleteIdea;
        window.closePanel = closePanel;
        window.toggleGlow = toggleGlow;
        window.toggleFlash = toggleFlash;
        window.toggleAnimateColors = toggleAnimateColors;
        window.toggleTransparent = toggleTransparent;
        window.changeGlowColor = changeGlowColor;
        window.toggleFixed = toggleFixed;
        window.toggleStatic = toggleStatic;
        window.changeColor = changeColor;
        window.changeTextColor = changeTextColor;
        window.cycleFont = cycleFont;
        window.handleImageUpload = handleImageUpload;
        window.handleImageSelect = handleImageSelect;
        window.clearUploadedImage = clearUploadedImage;
        window.loadBackgroundImage = loadBackgroundImage;
        window.updatePresetSelector = updatePresetSelector;
        window.switchPreset = switchPreset;
        window.testImageUpload = testImageUpload;
        window.testEffects = testEffects;
        window.togglePanelSide = togglePanelSide;
        window.toggleSpeed = toggleSpeed;
        window.togglePauseButton = togglePauseButton;
        window.toggleCheckeredBorder = toggleCheckeredBorder;
        window.minimizePanel = minimizePanel;
        window.restorePanel = restorePanel;
        window.toggleDrawingMode = toggleDrawingMode;
        window.clearDrawing = clearDrawing;
        window.changeDrawingColor = changeDrawingColor;
        window.changeDrawingWidth = changeDrawingWidth;
        window.testDrawing = testDrawing;
        window.showDrawingSettings = showDrawingSettings;
        window.closeDrawingSettings = closeDrawingSettings;
        window.setDrawingColor = setDrawingColor;
        window.setDrawingWidth = setDrawingWidth;
        window.clearDrawingFromPanel = clearDrawingFromPanel;
        window.clearDrawingOnly = clearDrawingOnly;
        window.toggleDrawingFlash = toggleDrawingFlash;
        window.smoothLastLine = smoothLastLine;
        window.debugDrawingPaths = debugDrawingPaths;
        window.switchToBubbleMode = switchToBubbleMode;
        window.clearDrawingsOnRightClick = clearDrawingsOnRightClick;
        
        // Video.js functions
        window.videoPlayVideo = videoPlayVideo;
        window.extractYouTubeId = extractYouTubeId;
        window.fetchVideoTitle = fetchVideoTitle;
        window.videoTogglePlaylist = videoTogglePlaylist;
        window.videoToggleFullscreen = videoToggleFullscreen;
        window.showVideoControls = showVideoControls;
        window.showVideoPlaylist = showVideoPlaylist;
        window.showVideoControlsOnMouseMove = showVideoControlsOnMouseMove;
        window.startVideoControlsAutoHide = startVideoControlsAutoHide;
        window.hideVideoControls = hideVideoControls;
        window.forceCloseVideo = forceCloseVideo;
        window.updateVideoOpacity = updateVideoOpacity;
        window.updateVideoSize = updateVideoSize;
        window.updateVideoVertical = updateVideoVertical;
        window.loadVideoControlImages = loadVideoControlImages;
        window.setupMediaEventListeners = setupMediaEventListeners;
        window.closePlaylist = closePlaylist;
        window.minimizePlaylist = minimizePlaylist;
        window.debugVideoControls = debugVideoControls;
        window.testPngAccess = testPngAccess;
        window.loadToolbarButtonImages = loadToolbarButtonImages;
        window.updatePauseButtonIcon = updatePauseButtonIcon;
        window.updateVideoPlayButtonIcon = updateVideoPlayButtonIcon;
        
        console.log("✅ All functions exported successfully");
        
      } catch (error) {
        console.error("❌ Error setting up global functions:", error);
      }
    }
    
    // Test function
    window.testFunction = function() {
      console.log('✅ Test function is working!');
      return 'test';
    };
    
    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      console.log("🚀 Starting MindsEye initialization...");
      
      // Export functions after DOM is ready
      setTimeout(exportAllFunctions, 100);
      
      // Test if functions are available after export
      setTimeout(() => {
        console.log("🔧 Testing function availability:");
        console.log("  rollDice:", typeof window.rollDice);
        console.log("  toggleMusicPanel:", typeof window.toggleMusicPanel);
        console.log("  captureCanvasOnly:", typeof window.captureCanvasOnly);
        console.log("  toggleMediaToolbar:", typeof window.toggleMediaToolbar);
        console.log("  toggleVideoPlayer:", typeof window.toggleVideoPlayer);
        console.log("  testFunction:", typeof window.testFunction);
      }, 300);
      
      // Initialize core functionality
      if (typeof init === 'function') {
        init();
      }
      
      // Set up event listeners
      if (typeof setupEventListeners === 'function') {
        setupEventListeners();
      }
      
      // Initialize video player
      if (typeof initVideoPlayer === 'function') {
        initVideoPlayer();
      }
      
      // Set up media event listeners
      if (typeof setupMediaEventListeners === 'function') {
        setupMediaEventListeners();
      }
      
      // Set up toolbar auto-hide
      let toolbar = document.getElementById('toolbar');
      let inactivityTimeout;
      
      function showToolbar() {
        toolbar.style.opacity = "1";
        clearTimeout(inactivityTimeout);
        
        // Don't auto-hide toolbar on mobile devices
        if (typeof isMobileDevice === 'function' && isMobileDevice()) {
  
          return;
        }
        
        inactivityTimeout = setTimeout(() => {
          toolbar.style.opacity = "0";
        }, 5000);
      }
      
      // Video controls auto-hide on mouse movement
      function handleMouseMove() {
        showToolbar();
        if (typeof showVideoControlsOnMouseMove === 'function') {
          showVideoControlsOnMouseMove();
        }
      }
      
      document.addEventListener("mousemove", handleMouseMove);
      showToolbar();
      
      // Ensure mobile toolbar visibility
      if (typeof ensureMobileToolbarVisibility === 'function') {
        ensureMobileToolbarVisibility();
      }
      
      console.log("✅ MindsEye initialization complete");
    });
  </script>
  <!-- Module-based visualization system -->
  <script type="module" src="modules/index.js"></script>
  <script>
    // Initialize the module system when DOM is ready
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        await window.initializeVisualizer();
        console.log('✅ Module-based visualizer system ready');
      } catch (error) {
        console.error('❌ Failed to initialize module system:', error);
      }
    });
  </script>
            type: 'energyField',
            description: 'Pulsing energy field with lightning'
          },
          {
            name: 'Crystal Formation',
            type: 'crystalFormation',
            description: 'Growing crystal structures'
          },
          {
            name: 'Plasma Storm',
            type: 'plasmaStorm',
            description: 'Intense plasma storm effects'
          },
          {
            name: 'Quantum Waves',
            type: 'quantumWaves',
            description: 'Quantum wave interference patterns'
          },
          {
            name: 'Stellar Nebula',
            type: 'stellarNebula',
            description: 'Cosmic nebula with star formation'
          },
          {
            name: 'Digital Vortex',
            type: 'digitalVortex',
            description: 'Digital vortex with data streams'
          },
          {
            name: 'Holographic Display',
            type: 'holographic',
            description: '3D holographic projection effects'
          },
          {
            name: 'Neural Network',
            type: 'neuralNetwork',
            description: 'Animated neural network connections'
          },
          {
            name: 'Fractal Universe',
            type: 'fractalUniverse',
            description: 'Infinite fractal patterns'
          },
          {
            name: 'Solar Flare',
            type: 'solarFlare',
            description: 'Intense solar flare effects'
          },
          {
            name: 'Aurora Borealis',
            type: 'auroraBorealis',
            description: 'Northern lights simulation'
          },
          {
            name: 'Magnetic Field',
            type: 'magneticField',
            description: 'Magnetic field line visualization'
          },
          {
            name: 'Temporal Rift',
            type: 'temporalRift',
            description: 'Time distortion effects'
          },
          {
            name: 'Gravity Well',
            type: 'gravityWell',
            description: 'Gravitational distortion effects'
          },
          {
            name: 'Quantum Tunnel',
            type: 'quantumTunnel',
            description: 'Quantum tunneling visualization'
          },
          {
            name: 'Dark Matter',
            type: 'darkMatter',
            description: 'Dark matter particle effects'
          },
          {
            name: 'Light Speed',
            type: 'lightSpeed',
            description: 'Relativistic light effects'
          },
          {
            name: 'Wormhole',
            type: 'wormhole',
            description: 'Space-time wormhole effects'
          },
          {
            name: 'Supernova',
            type: 'supernova',
            description: 'Explosive supernova simulation'
          }
        ];
        
        this.updatePresetInfo();
        console.log(`✅ Loaded ${this.presets.length} local presets`);
      },
      
      // Update preset information display
      updatePresetInfo: function() {
        const currentPreset = document.getElementById('currentPreset');
        const totalPresets = document.getElementById('totalPresets');
        const presetStatus = document.getElementById('presetStatus');
        
        if (currentPreset) currentPreset.textContent = this.presets[this.currentPreset].name;
        if (totalPresets) totalPresets.textContent = this.presets.length + ' Effects';
        if (presetStatus) presetStatus.textContent = 'Local system ready';
      },
      
      // Start visualization
      start: function() {
        if (this.isRunning) return;
        
        this.isRunning = true;
        this.render();
        console.log('🎬 Local visualizer started');
      },
      
      // Stop visualization
      stop: function() {
        this.isRunning = false;
        console.log('⏹️ Local visualizer stopped');
      },
      
      // Next preset
      next: function() {
        this.currentPreset = (this.currentPreset + 1) % this.presets.length;
        this.updatePresetInfo();
        console.log(`⏭️ Switched to: ${this.presets[this.currentPreset].name}`);
      },
      
      // Previous preset
      previous: function() {
        this.currentPreset = (this.currentPreset - 1 + this.presets.length) % this.presets.length;
        this.updatePresetInfo();
        console.log(`⏮️ Switched to: ${this.presets[this.currentPreset].name}`);
      },
      
      // Random preset
      random: function() {
        this.currentPreset = Math.floor(Math.random() * this.presets.length);
        this.updatePresetInfo();
        console.log(`🎲 Random preset: ${this.presets[this.currentPreset].name}`);
      },
      
      // Toggle visualization fullscreen (not entire site)
      toggleFullscreen: function() {
        const canvas = this.canvas;
        if (!canvas) return;
        
        if (!document.fullscreenElement) {
          // Enter fullscreen
          if (canvas.requestFullscreen) {
            canvas.requestFullscreen();
          } else if (canvas.webkitRequestFullscreen) {
            canvas.webkitRequestFullscreen();
          } else if (canvas.msRequestFullscreen) {
            canvas.msRequestFullscreen();
          }
          console.log('🎬 Visualization entered fullscreen');
        } else {
          // Exit fullscreen
          if (document.exitFullscreen) {
            document.exitFullscreen();
          } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
          } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
          }
          console.log('🎬 Visualization exited fullscreen');
        }
      },
      
      // Setup audio reactivity
      setupAudioReactivity: function() {
        // Try to connect to current audio if available
        if (window.currentAudio && window.currentAudio.src) {
          this.connectToAudio(window.currentAudio);
        }
        
        // Listen for new audio connections
        window.addEventListener('audioConnected', (event) => {
          if (event.detail && event.detail.audioElement) {
            this.connectToAudio(event.detail.audioElement);
          }
        });
        
        console.log('🎵 Audio reactivity setup complete');
      },
      
      // Connect to audio element for reactivity
      connectToAudio: function(audioElement) {
        try {
          const audioContext = new (window.AudioContext || window.webkitAudioContext)();
          const analyser = audioContext.createAnalyser();
          const source = audioContext.createMediaElementSource(audioElement);
          
          analyser.fftSize = 256;
          analyser.smoothingTimeConstant = 0.8;
          
          source.connect(analyser);
          analyser.connect(audioContext.destination);
          
          // Store analyser for data access
          this.analyser = analyser;
          
          console.log('🎵 Connected to audio for reactivity');
        } catch (error) {
          console.log('⚠️ Could not connect to audio for reactivity:', error.message);
        }
      },
      
      // Update audio data for reactivity
      updateAudioData: function() {
        if (this.analyser) {
          this.analyser.getByteFrequencyData(this.audioData.frequency);
          this.analyser.getByteTimeDomainData(this.audioData.waveform);
          
          // Calculate volume, bass, mid, treble
          let totalVolume = 0;
          let bassSum = 0;
          let midSum = 0;
          let trebleSum = 0;
          
          for (let i = 0; i < this.audioData.frequency.length; i++) {
            totalVolume += this.audioData.frequency[i];
            
            if (i < 8) { // Bass frequencies
              bassSum += this.audioData.frequency[i];
            } else if (i < 32) { // Mid frequencies
              midSum += this.audioData.frequency[i];
            } else { // Treble frequencies
              trebleSum += this.audioData.frequency[i];
            }
          }
          
          this.audioData.volume = totalVolume / this.audioData.frequency.length;
          this.audioData.bass = bassSum / 8;
          this.audioData.mid = midSum / 24;
          this.audioData.treble = trebleSum / 96;
        }
      },
      
      // Safety function to ensure positive values for rendering
      safeRadius: function(radius) {
        return Math.max(1, radius);
      },
      
      safeSize: function(size) {
        return Math.max(1, size);
      },
      
      // Fallback render function if main rendering fails
      renderFallback: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        
        // Simple pulsing circle as fallback
        const pulse = Math.sin(this.time * 2) * 0.5 + 0.5;
        const radius = 50 + pulse * 30;
        
        this.ctx.fillStyle = `rgba(76, 175, 80, ${0.3 + pulse * 0.5})`;
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
        this.ctx.fill();
        
        // Add some simple particles
        for (let i = 0; i < 10; i++) {
          const angle = (i / 10) * Math.PI * 2 + this.time;
          const x = centerX + Math.cos(angle) * (radius + 20);
          const y = centerY + Math.sin(angle) * (radius + 20);
          const size = 2 + pulse * 3;
          
          this.ctx.fillStyle = `rgba(255, 255, 255, ${0.5 + pulse * 0.5})`;
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Main render loop
      render: function() {
        if (!this.isRunning) return;
        
        const width = this.canvas.width;
        const height = this.canvas.height;
        
        // Update audio data for reactivity
        this.updateAudioData();
        
        // Clear canvas with fade effect
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
        this.ctx.fillRect(0, 0, width, height);
        
        // Render current preset with error handling
        try {
          const preset = this.presets[this.currentPreset];
          switch(preset.type) {
            case 'waveform':
              this.renderWaveform(width, height);
              break;
            case 'particles':
              this.renderParticles(width, height);
              break;
            case 'rings':
              this.renderRings(width, height);
              break;
            case 'spectrum':
              this.renderSpectrum(width, height);
              break;
            case 'shapes':
              this.renderShapes(width, height);
              break;
            case 'spiral':
              this.renderSpiral(width, height);
              break;
            case 'matrix':
              this.renderMatrix(width, height);
              break;
            case 'fireworks':
              this.renderFireworks(width, height);
              break;
            case 'neonGrid':
              this.renderNeonGrid(width, height);
              break;
            case 'cosmicDust':
              this.renderCosmicDust(width, height);
              break;
            case 'liquidMetal':
              this.renderLiquidMetal(width, height);
              break;
            case 'energyField':
              this.renderEnergyField(width, height);
              break;
            case 'crystalFormation':
              this.renderCrystalFormation(width, height);
              break;
            case 'plasmaStorm':
              this.renderPlasmaStorm(width, height);
              break;
            case 'quantumWaves':
              this.renderQuantumWaves(width, height);
              break;
            case 'stellarNebula':
              this.renderStellarNebula(width, height);
              break;
            case 'digitalVortex':
              this.renderDigitalVortex(width, height);
              break;
            case 'holographic':
              this.renderHolographic(width, height);
              break;
            case 'neuralNetwork':
              this.renderNeuralNetwork(width, height);
              break;
            case 'fractalUniverse':
              this.renderFractalUniverse(width, height);
              break;
            case 'solarFlare':
              this.renderSolarFlare(width, height);
              break;
            case 'auroraBorealis':
              this.renderAuroraBorealis(width, height);
              break;
            case 'magneticField':
              this.renderMagneticField(width, height);
              break;
            case 'temporalRift':
              this.renderTemporalRift(width, height);
              break;
            case 'gravityWell':
              this.renderGravityWell(width, height);
              break;
            case 'quantumTunnel':
              this.renderQuantumTunnel(width, height);
              break;
            case 'darkMatter':
              this.renderDarkMatter(width, height);
              break;
            case 'lightSpeed':
              this.renderLightSpeed(width, height);
              break;
            case 'wormhole':
              this.renderWormhole(width, height);
              break;
            case 'supernova':
              this.renderSupernova(width, height);
              break;
          }
        } catch (error) {
          console.error('🎨 Visualization render error:', error);
          // Fallback to a simple effect if rendering fails
          this.renderFallback(width, height);
        }
        
        this.time += 0.02;
        requestAnimationFrame(() => this.render());
      },
      
      // Waveform rendering with audio reactivity
      renderWaveform: function(width, height) {
        const audioIntensity = this.audioData.volume / 128;
        const bassBoost = this.audioData.bass / 128;
        
        this.ctx.strokeStyle = `hsl(${(this.time * 50 + bassBoost * 100) % 360}, 70%, 60%)`;
        this.ctx.lineWidth = 3 + audioIntensity * 5;
        this.ctx.beginPath();
        
        for (let x = 0; x < width; x += 2) {
          const progress = x / width;
          const audioIndex = Math.floor(progress * this.audioData.waveform.length);
          const audioWave = (this.audioData.waveform[audioIndex] - 128) / 128;
          
          const wave1 = Math.sin(this.time + progress * Math.PI * 4) * (50 + audioIntensity * 100);
          const wave2 = Math.sin(this.time * 0.7 + progress * Math.PI * 8) * (30 + bassBoost * 50);
          const wave3 = Math.sin(this.time * 0.5 + progress * Math.PI * 2) * (20 + audioWave * 40);
          const wave4 = Math.sin(this.time * 0.3 + progress * Math.PI * 12) * (15 + audioIntensity * 30);
          
          const y = height / 2 + wave1 + wave2 + wave3 + wave4;
          if (x === 0) {
            this.ctx.moveTo(x, y);
          } else {
            this.ctx.lineTo(x, y);
          }
        }
        
        this.ctx.stroke();
      },
      
      // Particle system rendering with audio reactivity
      renderParticles: function(width, height) {
        const audioIntensity = this.audioData.volume / 128;
        const bassBoost = this.audioData.bass / 128;
        const particleCount = 40 + Math.floor(audioIntensity * 20);
        
        for (let i = 0; i < particleCount; i++) {
          const angle = (i / particleCount) * Math.PI * 2 + this.time * 0.5;
          const baseRadius = 80;
          const audioRadius = audioIntensity * 100;
          const animationRadius = Math.sin(this.time * 2 + i * 0.5) * 60;
          const radius = baseRadius + audioRadius + animationRadius;
          
          const x = width / 2 + Math.cos(angle) * radius;
          const y = height / 2 + Math.sin(angle) * radius;
          
          const baseSize = 4;
          const audioSize = audioIntensity * 6;
          const animationSize = Math.sin(this.time * 3 + i * 0.3) * 4;
          const size = baseSize + audioSize + animationSize;
          
          const velocityX = Math.sin(this.time + i * 0.2) * (3 + bassBoost * 5);
          const velocityY = Math.cos(this.time + i * 0.2) * (3 + bassBoost * 5);
          
          // Color based on audio and position
          const hue = (i * 9 + this.time * 30 + bassBoost * 100) % 360;
          const saturation = 80 + audioIntensity * 20;
          const lightness = 70 + audioIntensity * 20;
          
          this.ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
          this.ctx.beginPath();
          this.ctx.arc(x + velocityX, y + velocityY, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Ring system rendering
      renderRings: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        
        for (let ring = 0; ring < 6; ring++) {
          const ringRadius = (this.time * 25 + ring * 35) % (Math.max(width, height) / 2);
          const ringOpacity = Math.max(0, 1 - (ringRadius / (Math.max(width, height) / 2)));
          const ringWidth = Math.max(1, 4 + Math.sin(this.time * 2 + ring) * 3);
          
          // Ensure radius is always positive
          const finalRadius = Math.max(1, ringRadius);
          
          this.ctx.strokeStyle = `hsla(${(this.time * 120 + ring * 50) % 360}, 80%, 60%, ${ringOpacity})`;
          this.ctx.lineWidth = ringWidth;
          this.ctx.beginPath();
          this.ctx.arc(centerX, centerY, finalRadius, 0, Math.PI * 2);
          this.ctx.stroke();
        }
      },
      
      // Spectrum rendering with audio reactivity
      renderSpectrum: function(width, height) {
        const barCount = 25;
        const barWidth = width / barCount;
        
        for (let i = 0; i < barCount; i++) {
          const x = i * barWidth;
          const progress = i / barCount;
          
          // Get audio frequency data for this bar
          const audioIndex = Math.floor(progress * this.audioData.frequency.length);
          const audioIntensity = this.audioData.frequency[audioIndex] / 255;
          
          // Base height + audio reactivity + animation
          const baseHeight = 25;
          const audioHeight = audioIntensity * 150;
          const animationHeight = Math.sin(this.time * 2.5 + progress * Math.PI * 5) * 30;
          const barHeight = baseHeight + audioHeight + animationHeight;
          
          const barY = height - barHeight;
          
          // Color based on frequency and audio intensity
          const hue = (progress * 360 + this.time * 120 + audioIntensity * 100) % 360;
          const saturation = 80 + audioIntensity * 20;
          const lightness = 60 + audioIntensity * 20;
          
          this.ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
          this.ctx.fillRect(x + 1, barY, barWidth - 2, barHeight);
        }
      },
      
      // Shape rendering
      renderShapes: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const shapeCount = 8;
        
        for (let i = 0; i < shapeCount; i++) {
          const angle = (i / shapeCount) * Math.PI * 2 + this.time;
          const radius = 70 + Math.sin(this.time * 1.8 + i * 0.4) * 25;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 18 + Math.sin(this.time * 2.5 + i * 0.3) * 10;
          
          this.ctx.fillStyle = `hsl(${(i * 45 + this.time * 100) % 360}, 80%, 60%)`;
          this.ctx.beginPath();
          
          if (i % 4 === 0) {
            this.ctx.arc(x, y, size, 0, Math.PI * 2);
          } else if (i % 4 === 1) {
            this.ctx.rect(x - size, y - size, size * 2, size * 2);
          } else if (i % 4 === 2) {
            this.ctx.moveTo(x, y - size);
            this.ctx.lineTo(x - size, y + size);
            this.ctx.lineTo(x + size, y + size);
            this.ctx.closePath();
          } else {
            this.ctx.moveTo(x, y - size);
            this.ctx.lineTo(x - size * 0.7, y + size * 0.7);
            this.ctx.lineTo(x + size * 0.7, y + size * 0.7);
            this.ctx.closePath();
          }
          
          this.ctx.fill();
        }
      },
      
      // Spiral rendering
      renderSpiral: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const maxRadius = Math.min(width, height) / 2;
        
        this.ctx.strokeStyle = `hsl(${(this.time * 80) % 360}, 80%, 60%)`;
        this.ctx.lineWidth = 2;
        this.ctx.beginPath();
        
        for (let angle = 0; angle < Math.PI * 8; angle += 0.1) {
          const radius = (angle / (Math.PI * 8)) * maxRadius;
          const x = centerX + Math.cos(angle + this.time) * radius;
          const y = centerY + Math.sin(angle + this.time) * radius;
          
          if (angle === 0) {
            this.ctx.moveTo(x, y);
          } else {
            this.ctx.lineTo(x, y);
          }
        }
        
        this.ctx.stroke();
      },
      
      // Matrix rain rendering
      renderMatrix: function(width, height) {
        const columns = 20;
        const columnWidth = width / columns;
        
        for (let col = 0; col < columns; col++) {
          const x = col * columnWidth;
          const speed = 0.5 + Math.sin(this.time + col * 0.5) * 0.3;
          const startY = (this.time * 100 * speed) % height;
          
          for (let i = 0; i < 15; i++) {
            const y = (startY + i * 20) % height;
            const opacity = Math.max(0, 1 - (i * 0.1));
            const size = 12 - i * 0.5;
            
            this.ctx.fillStyle = `rgba(0, 255, 0, ${opacity})`;
            this.ctx.font = `${size}px monospace`;
            this.ctx.fillText('1', x + 5, y);
          }
        }
      },
      
      // Fireworks rendering
      renderFireworks: function(width, height) {
        const fireworkCount = 3;
        
        for (let fw = 0; fw < fireworkCount; fw++) {
          const centerX = width * 0.3 + (fw * 0.2) * width;
          const centerY = height * 0.3 + Math.sin(this.time + fw) * 50;
          const particleCount = 30;
          
          for (let p = 0; p < particleCount; p++) {
            const angle = (p / particleCount) * Math.PI * 2;
            const velocity = 3 + Math.sin(this.time * 2 + p * 0.2) * 2;
            const x = centerX + Math.cos(angle) * velocity * (this.time * 20);
            const y = centerY + Math.sin(angle) * velocity * (this.time * 20);
            const size = Math.max(1, 3 + Math.sin(this.time * 3 + p * 0.3) * 2);
            
            this.ctx.fillStyle = `hsl(${(fw * 120 + p * 12 + this.time * 60) % 360}, 80%, 60%)`;
            this.ctx.beginPath();
            this.ctx.arc(x, y, size, 0, Math.PI * 2);
            this.ctx.fill();
          }
        }
      },
      
      // Neon Grid rendering
      renderNeonGrid: function(width, height) {
        const gridSize = 30;
        const pulse = Math.sin(this.time * 3) * 0.5 + 0.5;
        
        for (let x = 0; x < width; x += gridSize) {
          for (let y = 0; y < height; y += gridSize) {
            const glow = Math.sin(this.time + x * 0.01) * Math.cos(this.time + y * 0.01) * 0.5 + 0.5;
            const intensity = glow * pulse;
            
            this.ctx.strokeStyle = `rgba(0, 255, 255, ${intensity})`;
            this.ctx.lineWidth = 2;
            this.ctx.strokeRect(x, y, gridSize, gridSize);
          }
        }
      },
      
      // Cosmic Dust rendering
      renderCosmicDust: function(width, height) {
        const particleCount = 50;
        
        for (let i = 0; i < particleCount; i++) {
          const x = (i * 7.3) % width;
          const y = (i * 11.7) % height;
          const size = 2 + Math.sin(this.time + i * 0.1) * 2;
          const opacity = Math.sin(this.time * 0.5 + i * 0.1) * 0.5 + 0.5;
          
          // Create trail effect
          for (let trail = 0; trail < 5; trail++) {
            const trailX = x - trail * 2;
            const trailY = y - trail * 1;
            const trailOpacity = opacity * (1 - trail * 0.2);
            const trailSize = size * (1 - trail * 0.1);
            
            this.ctx.fillStyle = `rgba(255, 255, 255, ${trailOpacity})`;
            this.ctx.beginPath();
            this.ctx.arc(trailX, trailY, trailSize, 0, Math.PI * 2);
            this.ctx.fill();
          }
        }
      },
      
      // Liquid Metal rendering
      renderLiquidMetal: function(width, height) {
        const segments = 100;
        const centerY = height / 2;
        
        this.ctx.strokeStyle = 'rgba(192, 192, 192, 0.8)';
        this.ctx.lineWidth = 3;
        this.ctx.beginPath();
        
        for (let i = 0; i <= segments; i++) {
          const x = (i / segments) * width;
          const progress = i / segments;
          
          const wave1 = Math.sin(this.time + progress * Math.PI * 6) * 40;
          const wave2 = Math.sin(this.time * 0.7 + progress * Math.PI * 12) * 20;
          const wave3 = Math.sin(this.time * 0.5 + progress * Math.PI * 3) * 15;
          
          const y = centerY + wave1 + wave2 + wave3;
          
          if (i === 0) {
            this.ctx.moveTo(x, y);
          } else {
            this.ctx.lineTo(x, y);
          }
        }
        
        this.ctx.stroke();
        
        // Add metallic highlights
        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';
        this.ctx.lineWidth = 1;
        this.ctx.stroke();
      },
      
      // Energy Field rendering
      renderEnergyField: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const maxRadius = Math.min(width, height) / 2;
        
        // Create energy rings
        for (let ring = 0; ring < 8; ring++) {
          const radius = (ring * 30 + this.time * 50) % maxRadius;
          const pulse = Math.sin(this.time * 4 + ring * 0.5) * 0.5 + 0.5;
          const opacity = pulse * (1 - radius / maxRadius);
          
          this.ctx.strokeStyle = `rgba(0, 255, 0, ${opacity})`;
          this.ctx.lineWidth = 3 + pulse * 2;
          this.ctx.beginPath();
          this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
          this.ctx.stroke();
        }
        
        // Add lightning bolts
        for (let bolt = 0; bolt < 3; bolt++) {
          const angle = (bolt * Math.PI * 2 / 3) + this.time;
          const startX = centerX + Math.cos(angle) * 50;
          const startY = centerY + Math.sin(angle) * 50;
          const endX = centerX + Math.cos(angle) * maxRadius;
          const endY = centerY + Math.sin(angle) * maxRadius;
          
          this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.8)';
          this.ctx.lineWidth = 2;
          this.ctx.beginPath();
          this.ctx.moveTo(startX, startY);
          this.ctx.lineTo(endX, endY);
          this.ctx.stroke();
        }
      },
      
      // Crystal Formation rendering
      renderCrystalFormation: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const crystalCount = 6;
        
        for (let i = 0; i < crystalCount; i++) {
          const angle = (i / crystalCount) * Math.PI * 2 + this.time * 0.5;
          const radius = 60 + Math.sin(this.time * 2 + i * 0.5) * 30;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 20 + Math.sin(this.time * 3 + i * 0.3) * 10;
          
          this.ctx.fillStyle = `hsl(${(i * 60 + this.time * 50) % 360}, 80%, 60%)`;
          this.ctx.beginPath();
          
          // Draw crystal shape
          const points = 6;
          for (let p = 0; p < points; p++) {
            const pointAngle = (p / points) * Math.PI * 2 + angle;
            const pointX = x + Math.cos(pointAngle) * size;
            const pointY = y + Math.sin(pointAngle) * size;
            
            if (p === 0) {
              this.ctx.moveTo(pointX, pointY);
            } else {
              this.ctx.lineTo(pointX, pointY);
            }
          }
          
          this.ctx.closePath();
          this.ctx.fill();
        }
      },
      
      // Plasma Storm rendering
      renderPlasmaStorm: function(width, height) {
        const stormCount = 5;
        
        for (let storm = 0; storm < stormCount; storm++) {
          const centerX = width * 0.2 + (storm * 0.15) * width;
          const centerY = height * 0.3 + Math.sin(this.time + storm) * 100;
          const radius = 40 + Math.sin(this.time * 2 + storm * 0.5) * 20;
          
          // Create plasma effect
          for (let particle = 0; particle < 20; particle++) {
            const angle = (particle / 20) * Math.PI * 2 + this.time * 2;
            const distance = radius * (0.5 + Math.random() * 0.5);
            const x = centerX + Math.cos(angle) * distance;
            const y = centerY + Math.sin(angle) * distance;
            const size = 3 + Math.sin(this.time * 3 + particle * 0.2) * 2;
            
            this.ctx.fillStyle = `hsl(${(storm * 72 + this.time * 100) % 360}, 100%, 70%)`;
            this.ctx.beginPath();
            this.ctx.arc(x, y, size, 0, Math.PI * 2);
            this.ctx.fill();
          }
        }
      },
      
      // Quantum Waves rendering
      renderQuantumWaves: function(width, height) {
        const waveCount = 8;
        const centerY = height / 2;
        
        for (let wave = 0; wave < waveCount; wave++) {
          const amplitude = 30 + Math.sin(this.time + wave * 0.5) * 20;
          const frequency = 0.02 + wave * 0.01;
          const phase = wave * Math.PI / 4;
          
          this.ctx.strokeStyle = `hsla(${(wave * 45 + this.time * 30) % 360}, 80%, 60%, 0.7)`;
          this.ctx.lineWidth = 2;
          this.ctx.beginPath();
          
          for (let x = 0; x < width; x += 2) {
            const y = centerY + Math.sin(x * frequency + this.time + phase) * amplitude;
            
            if (x === 0) {
              this.ctx.moveTo(x, y);
            } else {
              this.ctx.lineTo(x, y);
            }
          }
          
          this.ctx.stroke();
        }
      },
      
      // Stellar Nebula rendering
      renderStellarNebula: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const starCount = 100;
        
        // Create nebula background
        const gradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, Math.min(width, height) / 2);
        gradient.addColorStop(0, 'rgba(255, 100, 255, 0.3)');
        gradient.addColorStop(0.5, 'rgba(100, 100, 255, 0.2)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
        
        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(0, 0, width, height);
        
        // Add stars
        for (let i = 0; i < starCount; i++) {
          const x = (i * 7.3) % width;
          const y = (i * 11.7) % height;
          const twinkle = Math.sin(this.time * 2 + i * 0.1) * 0.5 + 0.5;
          const size = (1 + twinkle) * 2;
          
          this.ctx.fillStyle = `rgba(255, 255, 255, ${twinkle})`;
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Digital Vortex rendering
      renderDigitalVortex: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const maxRadius = Math.min(width, height) / 2;
        
        // Create spiral data streams
        for (let stream = 0; stream < 5; stream++) {
          const streamAngle = (stream / 5) * Math.PI * 2 + this.time;
          
          for (let i = 0; i < 50; i++) {
            const progress = i / 50;
            const radius = progress * maxRadius;
            const angle = streamAngle + progress * Math.PI * 4;
            const x = centerX + Math.cos(angle) * radius;
            const y = centerY + Math.sin(angle) * radius;
            const size = 3 + Math.sin(this.time * 3 + i * 0.1) * 2;
            
            this.ctx.fillStyle = `hsl(${(stream * 72 + this.time * 50) % 360}, 80%, 60%)`;
            this.ctx.beginPath();
            this.ctx.arc(x, y, size, 0, Math.PI * 2);
            this.ctx.fill();
          }
        }
      },
      
      // Holographic Display rendering
      renderHolographic: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        
        // Create holographic grid
        for (let x = 0; x < width; x += 20) {
          for (let y = 0; y < height; y += 20) {
            const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
            const pulse = Math.sin(this.time * 2 + distance * 0.01) * 0.5 + 0.5;
            const opacity = pulse * (1 - distance / (Math.min(width, height) / 2));
            
            this.ctx.strokeStyle = `rgba(0, 255, 255, ${opacity})`;
            this.ctx.lineWidth = 1;
            this.ctx.strokeRect(x, y, 20, 20);
          }
        }
        
        // Add floating holographic elements
        for (let i = 0; i < 8; i++) {
          const angle = (i / 8) * Math.PI * 2 + this.time;
          const radius = 80 + Math.sin(this.time + i * 0.5) * 30;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 15 + Math.sin(this.time * 2 + i * 0.3) * 8;
          
          this.ctx.fillStyle = `rgba(255, 0, 255, 0.6)`;
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Neural Network rendering
      renderNeuralNetwork: function(width, height) {
        const nodeCount = 12;
        const nodes = [];
        
        // Create nodes
        for (let i = 0; i < nodeCount; i++) {
          const x = 50 + (i % 4) * (width - 100) / 3;
          const y = 50 + Math.floor(i / 4) * (height - 100) / 2;
          nodes.push({ x, y, activation: Math.sin(this.time + i * 0.5) * 0.5 + 0.5 });
        }
        
        // Draw connections
        for (let i = 0; i < nodes.length; i++) {
          for (let j = i + 1; j < nodes.length; j++) {
            const weight = Math.sin(this.time + i * j * 0.1) * 0.5 + 0.5;
            this.ctx.strokeStyle = `rgba(0, 255, 0, ${weight * 0.6})`;
            this.ctx.lineWidth = weight * 3;
            this.ctx.beginPath();
            this.ctx.moveTo(nodes[i].x, nodes[i].y);
            this.ctx.lineTo(nodes[j].x, nodes[j].y);
            this.ctx.stroke();
          }
        }
        
        // Draw nodes
        nodes.forEach(node => {
          this.ctx.fillStyle = `rgba(255, 255, 0, ${node.activation})`;
          this.ctx.beginPath();
          this.ctx.arc(node.x, node.y, 8, 0, Math.PI * 2);
          this.ctx.fill();
        });
      },
      
      // Fractal Universe rendering
      renderFractalUniverse: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const maxIterations = 8;
        
        for (let x = 0; x < width; x += 4) {
          for (let y = 0; y < height; y += 4) {
            const x0 = (x - centerX) / 100;
            const y0 = (y - centerY) / 100;
            let x1 = x0;
            let y1 = y0;
            let iteration = 0;
            
            while (x1 * x1 + y1 * y1 < 4 && iteration < maxIterations) {
              const temp = x1 * x1 - y1 * y1 + x0 + Math.sin(this.time) * 0.1;
              y1 = 2 * x1 * y1 + y0 + Math.cos(this.time) * 0.1;
              iteration++;
            }
            
            const color = (iteration / maxIterations) * 360;
            this.ctx.fillStyle = `hsl(${color}, 80%, 60%)`;
            this.ctx.fillRect(x, y, 4, 4);
          }
        }
      },
      
      // Solar Flare rendering
      renderSolarFlare: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const flareCount = 6;
        
        // Create solar core
        this.ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, 40, 0, Math.PI * 2);
        this.ctx.fill();
        
        // Create solar flares
        for (let flare = 0; flare < flareCount; flare++) {
          const angle = (flare / flareCount) * Math.PI * 2 + this.time;
          const length = 80 + Math.sin(this.time * 2 + flare * 0.5) * 40;
          
          this.ctx.strokeStyle = `rgba(255, 100, 0, 0.8)`;
          this.ctx.lineWidth = 8;
          this.ctx.beginPath();
          this.ctx.moveTo(centerX, centerY);
          this.ctx.lineTo(
            centerX + Math.cos(angle) * length,
            centerY + Math.sin(angle) * length
          );
          this.ctx.stroke();
        }
      },
      
      // Aurora Borealis rendering
      renderAuroraBorealis: function(width, height) {
        const auroraCount = 4;
        
        for (let aurora = 0; aurora < auroraCount; aurora++) {
          const baseY = height * 0.3 + aurora * 30;
          const amplitude = 60 + Math.sin(this.time + aurora * 0.5) * 30;
          
          this.ctx.strokeStyle = `hsla(${(aurora * 90 + 120) % 360}, 80%, 60%, 0.6)`;
          this.ctx.lineWidth = 8;
          this.ctx.beginPath();
          
          for (let x = 0; x < width; x += 2) {
            const progress = x / width;
            const y = baseY + Math.sin(progress * Math.PI * 4 + this.time + aurora * 0.3) * amplitude;
            
            if (x === 0) {
              this.ctx.moveTo(x, y);
            } else {
              this.ctx.lineTo(x, y);
            }
          }
          
          this.ctx.stroke();
        }
      },
      
      // Magnetic Field rendering
      renderMagneticField: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const fieldStrength = Math.sin(this.time) * 0.5 + 0.5;
        
        // Create magnetic field lines
        for (let line = 0; line < 12; line++) {
          const angle = (line / 12) * Math.PI * 2;
          const startX = centerX + Math.cos(angle) * 30;
          const startY = centerY + Math.sin(angle) * 30;
          const endX = centerX + Math.cos(angle) * 120;
          const endY = centerY + Math.sin(angle) * 120;
          
          this.ctx.strokeStyle = `rgba(0, 150, 255, ${fieldStrength})`;
          this.ctx.lineWidth = 3;
          this.ctx.beginPath();
          this.ctx.moveTo(startX, startY);
          this.ctx.lineTo(endX, endY);
          this.ctx.stroke();
        }
        
        // Add magnetic particles
        for (let i = 0; i < 20; i++) {
          const angle = (i / 20) * Math.PI * 2 + this.time;
          const radius = 60 + Math.sin(this.time * 2 + i * 0.2) * 40;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          
          this.ctx.fillStyle = 'rgba(0, 150, 255, 0.8)';
          this.ctx.beginPath();
          this.ctx.arc(x, y, 3, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Temporal Rift rendering
      renderTemporalRift: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        
        // Create time distortion effect
        for (let x = 0; x < width; x += 3) {
          for (let y = 0; y < height; y += 3) {
            const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
            const timeDistortion = Math.sin(this.time + distance * 0.01) * 0.5 + 0.5;
            const color = (timeDistortion * 300 + this.time * 50) % 360;
            
            this.ctx.fillStyle = `hsl(${color}, 80%, 60%)`;
            this.ctx.fillRect(x, y, 3, 3);
          }
        }
        
        // Add temporal particles
        for (let i = 0; i < 15; i++) {
          const angle = (i / 15) * Math.PI * 2 + this.time * 0.5;
          const radius = 80 + Math.sin(this.time + i * 0.3) * 30;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 4 + Math.sin(this.time * 2 + i * 0.2) * 3;
          
          this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Gravity Well rendering
      renderGravityWell: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const wellRadius = 60;
        
        // Create gravity well
        const gradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, wellRadius);
        gradient.addColorStop(0, 'rgba(0, 0, 0, 0.8)');
        gradient.addColorStop(0.7, 'rgba(100, 0, 100, 0.4)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
        
        this.ctx.fillStyle = gradient;
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, wellRadius, 0, Math.PI * 2);
        this.ctx.fill();
        
        // Add orbiting particles
        for (let i = 0; i < 25; i++) {
          const angle = (i / 25) * Math.PI * 2 + this.time;
          const radius = wellRadius + 20 + Math.sin(this.time + i * 0.2) * 10;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 2 + Math.sin(this.time * 2 + i * 0.1) * 1;
          
          this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Quantum Tunnel rendering
      renderQuantumTunnel: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const tunnelLength = Math.min(width, height);
        
        // Create tunnel effect
        for (let ring = 0; ring < 20; ring++) {
          const radius = (ring * 15 + this.time * 30) % tunnelLength;
          const opacity = Math.max(0, 1 - (radius / tunnelLength));
          const pulse = Math.sin(this.time * 3 + ring * 0.2) * 0.5 + 0.5;
          
          this.ctx.strokeStyle = `rgba(0, 255, 255, ${opacity * pulse})`;
          this.ctx.lineWidth = 2;
          this.ctx.beginPath();
          this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
          this.ctx.stroke();
        }
        
        // Add quantum particles
        for (let i = 0; i < 30; i++) {
          const angle = (i / 30) * Math.PI * 2 + this.time;
          const radius = 40 + Math.sin(this.time * 2 + i * 0.2) * 20;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 3 + Math.sin(this.time + i * 0.1) * 2;
          
          this.ctx.fillStyle = `hsl(${(i * 12 + this.time * 50) % 360}, 80%, 70%)`;
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Dark Matter rendering
      renderDarkMatter: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        
        // Create dark matter cloud
        for (let particle = 0; particle < 80; particle++) {
          const angle = (particle / 80) * Math.PI * 2 + this.time * 0.3;
          const radius = 50 + Math.sin(this.time + particle * 0.1) * 40;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 2 + Math.sin(this.time * 2 + particle * 0.05) * 1;
          const opacity = Math.sin(this.time + particle * 0.1) * 0.5 + 0.5;
          
          this.ctx.fillStyle = `rgba(100, 0, 150, ${opacity})`;
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
        
        // Add dark energy waves
        for (let wave = 0; wave < 3; wave++) {
          const waveRadius = 60 + wave * 30 + this.time * 20;
          const opacity = Math.max(0, 1 - (waveRadius / 200));
          
          this.ctx.strokeStyle = `rgba(50, 0, 100, ${opacity * 0.6})`;
          this.ctx.lineWidth = 2;
          this.ctx.beginPath();
          this.ctx.arc(centerX, centerY, waveRadius, 0, Math.PI * 2);
          this.ctx.stroke();
        }
      },
      
      // Light Speed rendering
      renderLightSpeed: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        
        // Create light speed trails
        for (let trail = 0; trail < 8; trail++) {
          const angle = (trail / 8) * Math.PI * 2 + this.time;
          const length = 100 + Math.sin(this.time * 2 + trail * 0.5) * 50;
          
          this.ctx.strokeStyle = `hsla(${(trail * 45 + this.time * 100) % 360}, 100%, 70%, 0.8)`;
          this.ctx.lineWidth = 4;
          this.ctx.beginPath();
          this.ctx.moveTo(centerX, centerY);
          this.ctx.lineTo(
            centerX + Math.cos(angle) * length,
            centerY + Math.sin(angle) * length
          );
          this.ctx.stroke();
        }
        
        // Add relativistic effects
        for (let i = 0; i < 20; i++) {
          const angle = (i / 20) * Math.PI * 2 + this.time * 0.5;
          const radius = 30 + Math.sin(this.time + i * 0.2) * 20;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = 2 + Math.sin(this.time * 3 + i * 0.1) * 1;
          
          this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Wormhole rendering
      renderWormhole: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const maxRadius = Math.min(width, height) / 2;
        
        // Create wormhole tunnel
        for (let ring = 0; ring < 25; ring++) {
          const radius = (ring * 8 + this.time * 40) % maxRadius;
          const opacity = Math.max(0, 1 - (radius / maxRadius));
          const distortion = Math.sin(this.time * 2 + ring * 0.1) * 10;
          
          // Ensure radius is always positive
          const finalRadius = Math.max(1, radius + distortion);
          
          this.ctx.strokeStyle = `rgba(150, 0, 255, ${opacity})`;
          this.ctx.lineWidth = 3;
          this.ctx.beginPath();
          this.ctx.arc(centerX, centerY, finalRadius, 0, Math.PI * 2);
          this.ctx.stroke();
        }
        
        // Add space-time distortion particles
        for (let i = 0; i < 40; i++) {
          const angle = (i / 40) * Math.PI * 2 + this.time;
          const radius = 80 + Math.sin(this.time * 1.5 + i * 0.1) * 30;
          const x = centerX + Math.cos(angle) * radius;
          const y = centerY + Math.sin(angle) * radius;
          const size = Math.max(1, 2 + Math.sin(this.time * 2 + i * 0.05) * 1);
          
          this.ctx.fillStyle = `hsl(${(i * 9 + this.time * 30) % 360}, 80%, 70%)`;
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      },
      
      // Supernova rendering
      renderSupernova: function(width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const explosionRadius = 50 + this.time * 30;
        
        // Create explosion core
        const gradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, explosionRadius);
        gradient.addColorStop(0, 'rgba(255, 255, 255, 0.9)');
        gradient.addColorStop(0.3, 'rgba(255, 255, 0, 0.8)');
        gradient.addColorStop(0.6, 'rgba(255, 100, 0, 0.6)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
        
        this.ctx.fillStyle = gradient;
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, explosionRadius, 0, Math.PI * 2);
        this.ctx.fill();
        
        // Create shockwave rings
        for (let ring = 0; ring < 5; ring++) {
          const ringRadius = explosionRadius + ring * 30;
          const opacity = Math.max(0, 1 - (ringRadius / 300));
          
          this.ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.6})`;
          this.ctx.lineWidth = 3;
          this.ctx.beginPath();
          this.ctx.arc(centerX, centerY, ringRadius, 0, Math.PI * 2);
          this.ctx.stroke();
        }
        
        // Add debris particles
        for (let i = 0; i < 60; i++) {
          const angle = (i / 60) * Math.PI * 2;
          const velocity = 2 + Math.random() * 3;
          const x = centerX + Math.cos(angle) * (explosionRadius + velocity * this.time * 10);
          const y = centerY + Math.sin(angle) * explosionRadius;
          const size = 2 + Math.random() * 3;
          
          this.ctx.fillStyle = `hsl(${(i * 6 + this.time * 50) % 360}, 80%, 70%)`;
          this.ctx.beginPath();
          this.ctx.arc(x, y, size, 0, Math.PI * 2);
          this.ctx.fill();
        }
      }
    };
    
    // Auto-initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      if (typeof LocalVisualizer !== 'undefined') {
        LocalVisualizer.init();
      }
    });
  </script>
</body>
</html> 